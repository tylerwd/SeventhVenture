'use strict';
// Load the AWS SDK for Node.js
const AWS = require('aws-sdk');
//Update the region for AWS;
AWS.config.update({region: "us-east-1"});
//Load Alexa SDK for Node.js
const Alexa = require('ask-sdk-core');

const LaunchRequestHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'LaunchRequest';
    },
    handle(handlerInput) {
        const speakOutput = 'Thanks for visiting Seventh Venture Coffee! You can ask us about our menu items, where we are right now, and any upcoming events!';
        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};
///////////////////////////////////////////////////////////////////////////////////////////CUSTOMER INTENT HANDLERS////////////////////////////////////////////////////////////////////////////////////////////////////////
//returns the menu as a list of items to the customer
//works with dynamodb
const getMenuIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'getMenuIntent';
    },
    handle(handlerInput) {
        
        
        // Setting up Handler as an observer to AWS trigger/events? I think.
        
      // exports.handler = function (event,context, callback) {
            //const ddb = new AWS.DynamoDB({apiVersion: "2012-10-08"}); // NOT USED
            const documentClient = new AWS.DynamoDB.DocumentClient({region: "us-east-1"});
            const params = {
                TableName: "SVMenuItems"
            };
            
            let MenuItemString = 'We have ';
            let scanPromise = new Promise((resolve, reject) => {
                     documentClient.scan(params, (err,data) => {
                        if(err){
                            console.log(err);
                        }           
                        
                                    for (var i = 0; i < (data.Count -1); i++){
                                        MenuItemString += data.Items[i].x + ',';
                                    }
                                    
                                        MenuItemString += ' and ' + data.Items[data.Count-1].x; 
                                    console.log("inside scan promise: " + MenuItemString);
                                    
                                    resolve(MenuItemString);
                        });
                        
            });
                    //console.log( 'Return value: ' + EventString);
                   return scanPromise.then(() => {
                        console.log(".Then Return: " + MenuItemString);
                                    return handlerInput.responseBuilder
                                    .speak(MenuItemString)
                                    .reprompt('Do you have any more questions for Seventh Venture?')
                                    .getResponse();
                    }).catch(() => {
                        return handlerInput.responseBuilder
                                    .speak('catch return')
                                    .reprompt('Do you have any more questions for Seventh Venture?')
                                    .getResponse();                        
                    });        
    }
};

//works with dynamodb
//TODO add checks for incoming intent slots so there is no failure
const menuCheckerIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'menuCheckerIntent';
    },
    handle(handlerInput) {
        var menuItem = handlerInput.requestEnvelope.request.intent.slots.menuItem.value;
        
        // Setting up Handler as an observer to AWS trigger/events? I think.
        
      // exports.handler = function (event,context, callback) {
            //const ddb = new AWS.DynamoDB({apiVersion: "2012-10-08"}); // NOT USED
            const documentClient = new AWS.DynamoDB.DocumentClient({region: "us-east-1"});
            const params = {
                TableName: "SVMenuItems"
            };

            let MenuItemString;
            let scanPromise = new Promise((resolve, reject) => {
                     documentClient.scan(params, (err,data) => {
                        if(err){
                            console.log(err);
                        }           
                        
                                    for (var i = 0; i < (data.Count); i++){
                                        MenuItemString += data.Items[i].x + ' ';
                                    }
                                    console.log(data);
                                    resolve(MenuItemString);
                        });
                        
            });
                    //console.log( 'Return value: ' + EventString);
                   let speakOutput = '';
                   return scanPromise.then(() => {
                       console.log('menu item in promise: ' + menuItem);
                       if (MenuItemString.includes(menuItem)){
                           speakOutput = 'Yes we have ' + menuItem;
                       } else {
                           speakOutput = 'Sorry we do not serve ' + menuItem;
                       }
                                    console.log('speak output: ' + speakOutput);
                                    return handlerInput.responseBuilder
                                    .speak(speakOutput)
                                    .reprompt('Do you have any more questions for Seventh Venture?')
                                    .getResponse();
                    }).catch(() => {
                        return handlerInput.responseBuilder
                                    .speak('catch return')
                                    .reprompt('Do you have any more questions for Seventh Venture?')
                                    .getResponse();                        
                    });        
    }
};

//gets the drink description from dynamodb menu
//TODO what happens when you don't have the drink description? 
const getDrinkDescriptionIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'getDrinkDescriptionIntent';
    },
    handle(handlerInput) {
         var menuItem = handlerInput.requestEnvelope.request.intent.slots.menuItem.value;
         const documentClient = new AWS.DynamoDB.DocumentClient({region: "us-east-1"});
            const params = {
                        TableName: "SVMenuItems",
                        Key : {
                            x : menuItem
                        }

};
            let descriptionReturn = '';
            let ingredientReturn = '';
            let scanPromise = new Promise((resolve, reject) => {
                     documentClient.get(params, (err,data) => {
                        if(err){
                            console.log(err);
                        }           
                                    console.log(data);
                                    descriptionReturn = data.Item.description;
                                    ingredientReturn = data.Item.ingredients;
                                    resolve(descriptionReturn,ingredientReturn);
                        });
                        
            });
            
                   return scanPromise.then(() => {
                                    return handlerInput.responseBuilder
                                    .speak(descriptionReturn + " " + menuItem + " contains " + ingredientReturn)
                                    .reprompt('Do you have any more questions for Seventh Venture?')
                                    .getResponse();
                    }).catch(() => {
                        return handlerInput.responseBuilder
                                    .speak('catch return')
                                    .reprompt('Do you have any more questions for Seventh Venture?')
                                    .getResponse();                        
                    });        
    }
};

//checks if a certain ingredient is in an item
//TODO more testing on cases that won't work
const getIngredientsInfoIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'getIngredientsInfoIntent';
    },
    handle(handlerInput) {
        var menuItem = handlerInput.requestEnvelope.request.intent.slots.menuItem.value;
        var ingredient = handlerInput.requestEnvelope.request.intent.slots.ingredient.value;
         const documentClient = new AWS.DynamoDB.DocumentClient({region: "us-east-1"});
            const params = {
                        TableName: "SVMenuItems",
                        Key : {
                            x : menuItem
                        }

};
            let ingredientReturn = '';
            let scanPromise = new Promise((resolve, reject) => {
                     documentClient.get(params, (err,data) => {
                        if(err){
                            console.log(err);
                        }           
                                    
                                    ingredientReturn = data.Item.ingredients;
                                    resolve(ingredientReturn);
                        });
                        
            });
            
                   return scanPromise.then(() => {
                                    let speakOutput = '';
                                    console.log("ingredientReturn: " + ingredientReturn );
                                    console.log("ingredient: " + ingredient );
                                    console.log("menu item: " + menuItem );
                                    if ((ingredientReturn.includes(ingredient)) || (ingredientReturn.equals(ingredient))){
                                        speakOutput = "Yes, " + menuItem + " contains " + ingredient;
                                    } else {
                                         speakOutput = "No, " + menuItem + " does not contain " + ingredient;
                                    }
                                    console.log("speakOutput: "+ speakOutput);
                                    return handlerInput.responseBuilder
                                    .speak(speakOutput)
                                    .reprompt('Do you have any more questions for Seventh Venture?')
                                    .getResponse();
                    }).catch(() => {
                        return handlerInput.responseBuilder
                                    .speak("I'm sorry there was an issue with your request. in this app")
                                    .reprompt('Do you have any more questions for Seventh Venture?')
                                    .getResponse();                        
                    });
    }
};

//returns the full ingredient list of a menu item this was moved to be handled in get drink description since the ask is so similar doesn't work currently
//TODO more testing on cases that won't work
/*const getIngredientsIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'getIngredientsIntent';
    },
    handle(handlerInput) {
        var menuItem = handlerInput.requestEnvelope.request.intent.slots.menuItem.value;
        var ingredient = handlerInput.requestEnvelope.request.intent.slots.ingredient.value;
         const documentClient = new AWS.DynamoDB.DocumentClient({region: "us-east-1"});
            const params = {
                        TableName: "SVMenuItems",
                        Key : {
                            x : menuItem
                        }

};
            let ingredientReturn = '';
            let scanPromise = new Promise((resolve, reject) => {
                     documentClient.get(params, (err,data) => {
                        if(err){
                            console.log(err);
                        }           
                                    
                                    ingredientReturn = data.Item.ingredients;
                                    resolve(ingredientReturn);
                        });
                        
            });
            
                   return scanPromise.then(() => {
                                    let speakOutput = '';
                                    console.log("ingredientReturn: " + ingredientReturn );
                                    console.log("ingredient: " + ingredient );
                                    console.log("menu item: " + menuItem );
                                    if ((ingredientReturn.includes(ingredient)) || (ingredientReturn.equals(ingredient))){
                                        speakOutput = "Yes, " + menuItem + " contains " + ingredient;
                                    } else {
                                         speakOutput = "No, " + menuItem + " does not contain " + ingredient;
                                    }
                                    console.log("speakOutput: "+ speakOutput);
                                    return handlerInput.responseBuilder
                                    .speak(speakOutput)
                                    .reprompt('Do you have any more questions for Seventh Venture?')
                                    .getResponse();
                    }).catch(() => {
                        return handlerInput.responseBuilder
                                    .speak("I'm sorry there was an issue with your request. in this app")
                                    .reprompt('Do you have any more questions for Seventh Venture?')
                                    .getResponse();                        
                    });
    }
};*/

const getLocationIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'getLocationIntent';
    },
    handle(handlerInput) {
        const speakOutput = 'Location';
        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt('Do you have any more questions for Seventh Venture?')
            .getResponse();
    }
};
//returns the upcoming events from the dynamodb table
const getUpcomingEventsIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'getUpcomingEventsIntent';
    },
    handle(handlerInput) {
        
        
        // Setting up Handler as an observer to AWS trigger/events? I think.
        
      // exports.handler = function (event,context, callback) {
            //const ddb = new AWS.DynamoDB({apiVersion: "2012-10-08"}); // NOT USED
            const documentClient = new AWS.DynamoDB.DocumentClient({region: "us-east-1"});
            const params = {
                TableName: "SVEvents"
            };
            //console.log('Made it in the handler');
            let EventString = '';
            
            let scanPromise = new Promise((resolve, reject) => {
                     documentClient.scan(params, (err,data) => {
                        if(err){
                            console.log(err);
                        }
                                    for (var i = 0; i < data.Count; i++){
                                        EventString += 'We will be at ' + data.Items[i].x + ' which will be held at ' + data.Items[i].Location
                                        + ' at ' + data.Items[i].Time + ' '; 
                                    }
                                    console.log("inside scan promise: " + EventString);
                                    
                                    resolve(EventString);
                        });
                        
            });
                    //console.log( 'Return value: ' + EventString);
                   return scanPromise.then(() => {
                        console.log(".Then Return: " + EventString);
                                    return handlerInput.responseBuilder
                                    .speak(EventString)
                                    .reprompt('Do you have any more questions for Seventh Venture?')
                                    .getResponse();
                    }).catch(() => {
                        return handlerInput.responseBuilder
                                    .speak('catch return')
                                    .reprompt('Do you have any more questions for Seventh Venture?')
                                    .getResponse();                        
                    }); 

    }

    };
    
//////////////////////////////////////////////////////////////////////OWNER INTENT HANDLERS////////////////////////////////////////////////////////////////////////////////////////////////////////
//TODO get Event type and Event Time slots to work correctly
const addEventIntentHandler= {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'addEventIntent';
    },
    handle(handlerInput) {
        var eventType = "coffee night"; //handlerInput.requestEnvelope.request.intent.slots.eventType.value.name;
        var eventLocation = handlerInput.requestEnvelope.request.intent.slots.eventLocation.value;
        var eventTime = "8 pm";//handlerInput.requestEnvelope.request.intent.slots.eventTime.value;
        console.log ("input type: " + eventType);
        console.log("input location: " +  eventLocation);
        console.log("input time: " +  eventTime);
        
         const ddb = new AWS.DynamoDB({region: "us-east-1"});
            const params = {
                        TableName: "SVEvents",
                        Item : {
                            'x': {S: eventType},
                            'Location': {S: eventLocation},
                            'Time': {S: eventTime}
                        }

};
            let putItemPromise = new Promise((resolve, reject) => {
                     ddb.putItem(params, (err,data) => {
                        if(err){
                            console.log(err);
                        }           
                                    console.log('Added Data');
                                    resolve();
                        });
                        
            });
            
                   return putItemPromise.then(() => {
                                    return handlerInput.responseBuilder
                                    .speak(eventType + " at " + eventLocation + " at " + eventType + " added ")
                                    .reprompt('Do you have any more questions for Seventh Venture?')
                                    .getResponse();
                    }).catch(() => {
                        return handlerInput.responseBuilder
                                    .speak('catch return')
                                    .reprompt('Do you have any more questions for Seventh Venture?')
                                    .getResponse();                        
                    });
    }
};



////////////////////////////////////////////////////////////////////////UTILITY INTENT HANDLERS////////////////////////////////////////////////////////////////////////////////////////////////////
const HelpIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.HelpIntent';
    },
    handle(handlerInput) {
        const speakOutput = 'You can check our menu, ask for a description of our drinks, ask for our current location, and more! If you have any questions, visit us on instagram at seventh venture alexa for a comprehensive guide on our alexa app!';

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};
const CancelAndStopIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && (Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.CancelIntent'
                || Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.StopIntent');
    },
    handle(handlerInput) {
        const speakOutput = 'Goodbye!';
        return handlerInput.responseBuilder
            .speak(speakOutput)
            .getResponse();
    }
};
const SessionEndedRequestHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'SessionEndedRequest';
    },
    handle(handlerInput) {
        // Any cleanup logic goes here.
        return handlerInput.responseBuilder.getResponse();
    }
};

// The intent reflector is used for interaction model testing and debugging.
// It will simply repeat the intent the user said. You can create custom handlers
// for your intents by defining them above, then also adding them to the request
// handler chain below.
const IntentReflectorHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest';
    },
    handle(handlerInput) {
        const intentName = Alexa.getIntentName(handlerInput.requestEnvelope);
        const speakOutput = `You just triggered ${intentName} and there was an error triggering the response correctly. If you believe your request should have worked, please contact us at seventh venture coffee at gmail dot com so we can patch your issue`;

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt('The intent you were attempting to trigger did not trigger properly. Please try again or try another request')
            .getResponse();
    }
};

// Generic error handling to capture any syntax or routing errors. If you receive an error
// stating the request handler chain is not found, you have not implemented a handler for
// the intent being invoked or included it in the skill builder below.
const ErrorHandler = {
    canHandle() {
        return true;
    },
    handle(handlerInput, error) {
        console.log(`~~~~ Error handled: ${error.stack}`);
        const speakOutput = `Sorry, there was an issue proccessing your request. If you can, please provide us with what you asked at seventh venture coffee at gmail dot com so we can patch the issue.`;

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt('Please try your request again, or try another request.')
            .getResponse();
    }
};

// The SkillBuilder acts as the entry point for your skill, routing all request and response
// payloads to the handlers above. Make sure any new handlers or interceptors you've
// defined are included below. The order matters - they're processed top to bottom.
exports.handler = Alexa.SkillBuilders.custom()
    .addRequestHandlers(
        LaunchRequestHandler,
        HelpIntentHandler,
        getMenuIntentHandler,
        getDrinkDescriptionIntentHandler,
        getLocationIntentHandler,
        addEventIntentHandler,
        getUpcomingEventsIntentHandler,
        getIngredientsInfoIntentHandler,
        //getIngredientsIntentHandler,
        menuCheckerIntentHandler,
        CancelAndStopIntentHandler,
        SessionEndedRequestHandler,
        IntentReflectorHandler, // make sure IntentReflectorHandler is last so it doesn't override your custom intent handlers
    )
    .addErrorHandlers(
        ErrorHandler,
    )
    .lambda();
