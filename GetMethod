/*'use strict';
const AWS = require('aws-sdk');
AWS.config.update({region: "us-east-1"});
exports.handler = function (event,context, callback)  {
    const ddb = new AWS.DynamoDB({apiVersion: "2012-10-08"});
    const documentClient = new AWS.DynamoDB.DocumentClient({region: "us-east-1"});
    const params = {
        TableName: "SVEvents",
    };
    
       documentClient.scan(params, (err,data) => {
            if(err){
                console.log(err);
            }
                console.log(data);
                        //for (var i = 0; i < data.Count; i++){
                        //    eventString += 'We will be at ' + data.Items[i].EventName + ' which will be held at ' + data.Items[i].Location
                         //   + ' at ' + data.Items[i].Time + ' '; 
                        //}                
        });
};*/
/*// Load the AWS SDK for JS
var AWS = require("aws-sdk");

// Set a region to interact with (make sure it's the same as the region of your table)
AWS.config.update({region: 'us-east-1'});
exports.handler = function (event,context, callback)  {
// Set a table name that we can use later on
const tableName = "SVEvents";

// Create the Service interface for DynamoDB
var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'});

// Create the Document Client interface for DynamoDB
var ddbDocumentClient = new AWS.DynamoDB.DocumentClient();
// Use the DynamoDB client scan operation to retrieve all items of the table

async function scanForResults(){
    try {
        var params = {
            TableName: tableName
        };
        var result = await dynamodb.scan(params).promise();
        console.log(JSON.stringify(result));
        return result
    } catch (error) {
        console.error(error);
        return error;
    }
}
var finalOutput = scanForResults()
console.log(finalOutput)
};
*/
'use strict';
const AWS = require('aws-sdk');
AWS.config.update({region: "us-east-1"});
let EventString = '';

// Setting up Handler as an observer to AWS trigger/events? I think.
exports.handler = function (event,context, callback)  {
    //const ddb = new AWS.DynamoDB({apiVersion: "2012-10-08"}); // NOT USED
    const documentClient = new AWS.DynamoDB.DocumentClient({region: "us-east-1"});
    const params = {
        TableName: "SVEvents"
    };
    //console.log('Made it in the handler');
       
    var scanPromise = documentClient.scan(params).promise();

    scanPromise.then(
        function(data) {
            /* process the data */
            //console.log('Made it into the promise data block');
            for (var i = 0; i < data.Count; i++)
            {
                EventString += 'We will be at ' + data.Items[i].EventName + ' which will be held at ' + data.Items[i].Location + ' at ' + data.Items[i].Time + ' ';
            }
            //console.log('Event string in the promise data block: ' + EventString);
           
            // DO THE RETURN TO THE ALEXA FUNCTION IN HERE!!!!!!!! ===> This is what I returned to make it so the response isn't null
            callback(null, {
                statusCode: '200',
                body: EventString,
                headers: {
                    'Content-Type': 'application/json',
                },
                
            });
            //console.log(EventString);
            return EventString;
        },
        function(error) {
            /* handle the error */
            //console.log('An error occurred in the promise');
            // DO THE RETURN TO THE ALEXA (IN THE CASE OF AN ERROR) IN HERE!!!!!
           
            callback(null, {
                statusCode: '400',
                body: error,
                headers: {
                    'Content-Type': 'application/json',
                },
            });
            //console.log(EventString);
            return EventString;
        }
    );
}
